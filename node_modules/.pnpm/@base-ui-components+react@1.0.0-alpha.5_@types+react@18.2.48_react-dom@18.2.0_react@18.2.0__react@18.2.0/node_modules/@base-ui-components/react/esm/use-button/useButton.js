'use client';

import * as React from 'react';
import { NOOP } from '../utils/noop.js';
import { useForkRef } from '../utils/useForkRef.js';
import { mergeReactProps } from '../utils/mergeReactProps.js';
import { useEventCallback } from '../utils/useEventCallback.js';
import { useRootElementName } from '../utils/useRootElementName.js';
export function useButton(parameters = {}) {
  const {
    buttonRef: externalRef,
    disabled = false,
    focusableWhenDisabled,
    tabIndex,
    type,
    elementName: elementNameProp
  } = parameters;
  const buttonRef = React.useRef(null);
  const {
    rootElementName: elementName,
    updateRootElementName
  } = useRootElementName({
    rootElementName: elementNameProp
  });
  const isNativeButton = useEventCallback(() => {
    const element = buttonRef.current;
    return elementName === 'BUTTON' || elementName === 'INPUT' && ['button', 'submit', 'reset'].includes(element?.type);
  });
  const isValidLink = useEventCallback(() => {
    const element = buttonRef.current;
    return Boolean(elementName === 'A' && element?.href);
  });
  const mergedRef = useForkRef(updateRootElementName, externalRef, buttonRef);
  const buttonProps = React.useMemo(() => {
    const additionalProps = {};
    if (tabIndex !== undefined) {
      additionalProps.tabIndex = tabIndex;
    }
    if (elementName === 'BUTTON' || elementName === 'INPUT') {
      if (focusableWhenDisabled) {
        additionalProps['aria-disabled'] = disabled;
      } else {
        additionalProps.disabled = disabled;
      }
    } else if (elementName !== '') {
      additionalProps.role = 'button';
      additionalProps.tabIndex = tabIndex ?? 0;
      if (disabled) {
        additionalProps['aria-disabled'] = disabled;
        additionalProps.tabIndex = focusableWhenDisabled ? tabIndex ?? 0 : -1;
      }
    }
    return additionalProps;
  }, [disabled, elementName, focusableWhenDisabled, tabIndex]);
  const getButtonProps = React.useCallback((externalProps = {}) => {
    const onClickProp = externalProps?.onClick ?? NOOP;
    const otherExternalProps = {
      ...externalProps
    };
    delete otherExternalProps.onClick;
    return mergeReactProps(otherExternalProps, buttonProps, {
      type,
      onClick(event) {
        if (!disabled) {
          onClickProp(event);
        }
      },
      onKeyDown(event) {
        if (event.target === event.currentTarget && !isNativeButton() && event.key === ' ') {
          event.preventDefault();
        }

        // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && !isNativeButton() && !isValidLink() && event.key === 'Enter' && !disabled) {
          onClickProp(event);
          event.preventDefault();
        }
      },
      onKeyUp(event) {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/p/sandbox/button-keyup-preventdefault-dn7f0
        // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === ' ') {
          onClickProp(event);
        }
      },
      ref: mergedRef
    });
  }, [buttonProps, disabled, isNativeButton, isValidLink, mergedRef, type]);
  return {
    getButtonProps,
    buttonRef: mergedRef
  };
}