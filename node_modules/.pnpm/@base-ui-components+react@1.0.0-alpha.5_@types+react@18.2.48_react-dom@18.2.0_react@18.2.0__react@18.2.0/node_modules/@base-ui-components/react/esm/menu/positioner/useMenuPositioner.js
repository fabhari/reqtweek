'use client';

import * as React from 'react';
import { useFloatingTree } from '@floating-ui/react';
import { mergeReactProps } from '../../utils/mergeReactProps.js';
import { useAnchorPositioning } from '../../utils/useAnchorPositioning.js';
import { useMenuRootContext } from '../root/MenuRootContext.js';
export function useMenuPositioner(params) {
  const {
    nodeId,
    parentNodeId
  } = params;
  const {
    open,
    setOpen,
    mounted
  } = useMenuRootContext();
  const positioning = useAnchorPositioning(params);
  const {
    events: menuEvents
  } = useFloatingTree();
  const getPositionerProps = React.useCallback((externalProps = {}) => {
    const hiddenStyles = {};
    if (!open) {
      hiddenStyles.pointerEvents = 'none';
    }
    return mergeReactProps(externalProps, {
      role: 'presentation',
      hidden: !mounted,
      style: {
        ...positioning.positionerStyles,
        ...hiddenStyles
      }
    });
  }, [open, mounted, positioning.positionerStyles]);
  React.useEffect(() => {
    function onMenuOpened(event) {
      if (event.nodeId !== nodeId && event.parentNodeId === parentNodeId) {
        setOpen(false, undefined);
      }
    }
    menuEvents.on('opened', onMenuOpened);
    return () => {
      menuEvents.off('opened', onMenuOpened);
    };
  }, [menuEvents, nodeId, parentNodeId, setOpen]);
  React.useEffect(() => {
    if (open) {
      menuEvents.emit('opened', {
        nodeId,
        parentNodeId
      });
    }
  }, [menuEvents, open, nodeId, parentNodeId]);
  return React.useMemo(() => ({
    ...positioning,
    getPositionerProps
  }), [positioning, getPositionerProps]);
}