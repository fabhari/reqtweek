import * as React from 'react';
import { useAnchorPositioning } from '../../utils/useAnchorPositioning.js';
import { mergeReactProps } from '../../utils/mergeReactProps.js';
import { useSelectRootContext } from '../root/SelectRootContext.js';
import { useScrollLock } from '../../utils/useScrollLock.js';
export function useSelectPositioner(params) {
  const {
    open,
    alignItemToTrigger,
    mounted,
    triggerElement,
    modal
  } = useSelectRootContext();
  useScrollLock((alignItemToTrigger || modal) && open, triggerElement);
  const positioning = useAnchorPositioning({
    ...params,
    trackAnchor: params.trackAnchor ?? !alignItemToTrigger
  });
  const positionerStyles = React.useMemo(() => alignItemToTrigger ? {
    position: 'fixed'
  } : positioning.positionerStyles, [alignItemToTrigger, positioning.positionerStyles]);
  const getPositionerProps = React.useCallback((externalProps = {}) => {
    const hiddenStyles = {};
    if (!open) {
      hiddenStyles.pointerEvents = 'none';
    }
    return mergeReactProps(externalProps, {
      role: 'presentation',
      hidden: !mounted,
      style: {
        ...positionerStyles,
        ...hiddenStyles
      }
    });
  }, [open, mounted, positionerStyles]);
  return React.useMemo(() => ({
    ...positioning,
    side: alignItemToTrigger ? 'none' : positioning.side,
    getPositionerProps
  }), [alignItemToTrigger, getPositionerProps, positioning]);
}