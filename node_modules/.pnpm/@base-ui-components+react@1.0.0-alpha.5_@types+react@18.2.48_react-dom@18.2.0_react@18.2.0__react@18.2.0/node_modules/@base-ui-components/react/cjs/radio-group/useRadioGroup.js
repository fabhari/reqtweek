"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRadioGroup = useRadioGroup;
var React = _interopRequireWildcard(require("react"));
var _utils = require("@floating-ui/react/utils");
var _mergeReactProps = require("../utils/mergeReactProps");
var _useControlled = require("../utils/useControlled");
var _FieldRootContext = require("../field/root/FieldRootContext");
var _useBaseUiId = require("../utils/useBaseUiId");
var _useFieldControlValidation = require("../field/control/useFieldControlValidation");
var _useField = require("../field/useField");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useRadioGroup(params) {
  const {
    disabled = false,
    name,
    defaultValue,
    readOnly,
    value: externalValue
  } = params;
  const {
    labelId,
    setTouched: setFieldTouched
  } = (0, _FieldRootContext.useFieldRootContext)();
  const {
    getValidationProps,
    getInputValidationProps,
    inputRef: inputValidationRef,
    commitValidation
  } = (0, _useFieldControlValidation.useFieldControlValidation)();
  const id = (0, _useBaseUiId.useBaseUiId)();
  const [checkedValue, setCheckedValue] = (0, _useControlled.useControlled)({
    controlled: externalValue,
    default: defaultValue,
    name: 'RadioGroup',
    state: 'value'
  });
  (0, _useField.useField)({
    id,
    commitValidation,
    value: checkedValue,
    controlRef: inputValidationRef
  });
  const [touched, setTouched] = React.useState(false);
  const getRootProps = React.useCallback((externalProps = {}) => (0, _mergeReactProps.mergeReactProps)(getValidationProps(externalProps), {
    role: 'radiogroup',
    'aria-disabled': disabled || undefined,
    'aria-readonly': readOnly || undefined,
    'aria-labelledby': labelId,
    onBlur(event) {
      if (!(0, _utils.contains)(event.currentTarget, event.relatedTarget)) {
        setFieldTouched(true);
        commitValidation(checkedValue);
      }
    },
    onKeyDownCapture(event) {
      if (event.key.startsWith('Arrow')) {
        setFieldTouched(true);
        setTouched(true);
      }
    }
  }), [checkedValue, commitValidation, disabled, getValidationProps, labelId, readOnly, setFieldTouched]);
  const serializedCheckedValue = React.useMemo(() => {
    if (checkedValue == null) {
      return ''; // avoid uncontrolled -> controlled error
    }
    if (typeof checkedValue === 'string') {
      return checkedValue;
    }
    return JSON.stringify(checkedValue);
  }, [checkedValue]);
  const getInputProps = React.useCallback((externalProps = {}) => (0, _mergeReactProps.mergeReactProps)(getInputValidationProps(externalProps), {
    type: 'hidden',
    value: serializedCheckedValue,
    ref: inputValidationRef,
    id,
    name,
    disabled,
    readOnly
  }), [getInputValidationProps, serializedCheckedValue, inputValidationRef, id, name, disabled, readOnly]);
  return React.useMemo(() => ({
    getRootProps,
    getInputProps,
    checkedValue,
    setCheckedValue,
    touched,
    setTouched
  }), [getRootProps, getInputProps, checkedValue, setCheckedValue, touched]);
}