"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InternalBackdrop = InternalBackdrop;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @ignore - internal component.
 */function InternalBackdrop(props) {
  const {
    inert = false
  } = props;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    role: "presentation",
    style: {
      position: 'fixed',
      inset: 0,
      // Allows `:hover` events immediately after `open` changes to `false`,
      // preventing a flicker when the cursor rests on the trigger. Flickers occur
      // because CSS `:hover` is temporarily blocked during an exit animation,
      // and `[data-popup-open]` is removed.
      // Keeping the backdrop in the DOM avoids `[data-floating-ui-inert]`, which
      // blocks outside clicks from closing the popup. This issue arises when
      // conditionally rendering the backdrop on `open` and using exit animations.
      // If the popup reopens before the exit animation finishes, the backdrop
      // receives this attribute, breaking outside click behavior.
      pointerEvents: inert ? 'none' : undefined
    }
  });
}
process.env.NODE_ENV !== "production" ? InternalBackdrop.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Whether the backdrop should be inert (not block pointer events).
   * @default false
   */
  inert: _propTypes.default.bool
} : void 0;