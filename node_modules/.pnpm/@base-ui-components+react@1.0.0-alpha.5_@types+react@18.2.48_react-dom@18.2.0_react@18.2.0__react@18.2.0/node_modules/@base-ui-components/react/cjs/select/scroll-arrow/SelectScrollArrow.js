"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectScrollArrow = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _mergeReactProps = require("../../utils/mergeReactProps");
var _SelectRootContext = require("../root/SelectRootContext");
var _SelectPositionerContext = require("../positioner/SelectPositionerContext");
var _useTransitionStatus = require("../../utils/useTransitionStatus");
var _useForkRef = require("../../utils/useForkRef");
var _useAfterExitAnimation = require("../../utils/useAfterExitAnimation");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @ignore - internal component.
 */
const SelectScrollArrow = exports.SelectScrollArrow = /*#__PURE__*/React.forwardRef(function SelectScrollArrow(props, forwardedRef) {
  const {
    render,
    className,
    direction,
    keepMounted = false,
    ...otherProps
  } = props;
  const {
    alignItemToTrigger,
    popupRef,
    scrollUpArrowVisible,
    scrollDownArrowVisible,
    setScrollUpArrowVisible,
    setScrollDownArrowVisible
  } = (0, _SelectRootContext.useSelectRootContext)();
  const {
    side
  } = (0, _SelectPositionerContext.useSelectPositionerContext)();
  const visible = direction === 'up' ? scrollUpArrowVisible : scrollDownArrowVisible;
  const frameRef = React.useRef(-1);
  const scrollArrowRef = React.useRef(null);
  const mergedRef = (0, _useForkRef.useForkRef)(forwardedRef, scrollArrowRef);
  const {
    mounted,
    transitionStatus,
    setMounted
  } = (0, _useTransitionStatus.useTransitionStatus)(visible);
  (0, _useAfterExitAnimation.useAfterExitAnimation)({
    open: visible,
    animatedElementRef: scrollArrowRef,
    onFinished() {
      setMounted(false);
    }
  });
  const state = React.useMemo(() => ({
    direction,
    visible,
    side,
    transitionStatus
  }), [direction, visible, side, transitionStatus]);
  const getScrollArrowProps = React.useCallback((externalProps = {}) => (0, _mergeReactProps.mergeReactProps)(externalProps, {
    'aria-hidden': true,
    children: direction === 'down' ? '▼' : '▲',
    style: {
      position: 'absolute'
    },
    onMouseEnter() {
      if (!alignItemToTrigger) {
        return;
      }
      let prevNow = Date.now();
      function handleFrame() {
        const popupElement = popupRef.current;
        if (!popupElement) {
          return;
        }
        const currentNow = Date.now();
        const msElapsed = currentNow - prevNow;
        prevNow = currentNow;
        const pixelsLeftToScroll = direction === 'up' ? popupElement.scrollTop : popupElement.scrollHeight - popupElement.clientHeight - popupElement.scrollTop;
        const pixelsToScroll = Math.min(pixelsLeftToScroll, msElapsed / 2);
        const isScrolledToTop = popupElement.scrollTop === 0;
        const isScrolledToBottom = Math.round(popupElement.scrollTop + popupElement.clientHeight) >= popupElement.scrollHeight;
        if (msElapsed > 0) {
          if (direction === 'up') {
            setScrollUpArrowVisible(!isScrolledToTop);
          } else if (direction === 'down') {
            setScrollDownArrowVisible(!isScrolledToBottom);
          }
          if (direction === 'up' && isScrolledToTop || direction === 'down' && isScrolledToBottom) {
            return;
          }
        }
        const scrollDirection = direction === 'up' ? -1 : 1;
        if (popupRef.current) {
          popupRef.current.scrollTop += scrollDirection * pixelsToScroll;
        }
        frameRef.current = requestAnimationFrame(handleFrame);
      }
      frameRef.current = requestAnimationFrame(handleFrame);
    },
    onMouseLeave() {
      cancelAnimationFrame(frameRef.current);
    }
  }), [direction, alignItemToTrigger, popupRef, setScrollUpArrowVisible, setScrollDownArrowVisible]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: getScrollArrowProps,
    ref: mergedRef,
    render: render ?? 'div',
    className,
    state,
    extraProps: {
      hidden: !mounted,
      ...otherProps
    }
  });
  const shouldRender = visible || keepMounted;
  if (!shouldRender) {
    return null;
  }
  return renderElement();
});
process.env.NODE_ENV !== "production" ? SelectScrollArrow.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * @ignore
   */
  direction: _propTypes.default.oneOf(['down', 'up']).isRequired,
  /**
   * Whether to keep the HTML element in the DOM while the select menu is not scrollable.
   * @default false
   */
  keepMounted: _propTypes.default.bool,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func])
} : void 0;