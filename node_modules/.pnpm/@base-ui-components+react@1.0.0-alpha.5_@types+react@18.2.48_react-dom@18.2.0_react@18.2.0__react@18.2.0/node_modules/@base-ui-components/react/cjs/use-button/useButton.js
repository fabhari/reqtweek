"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useButton = useButton;
var React = _interopRequireWildcard(require("react"));
var _noop = require("../utils/noop");
var _useForkRef = require("../utils/useForkRef");
var _mergeReactProps = require("../utils/mergeReactProps");
var _useEventCallback = require("../utils/useEventCallback");
var _useRootElementName = require("../utils/useRootElementName");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useButton(parameters = {}) {
  const {
    buttonRef: externalRef,
    disabled = false,
    focusableWhenDisabled,
    tabIndex,
    type,
    elementName: elementNameProp
  } = parameters;
  const buttonRef = React.useRef(null);
  const {
    rootElementName: elementName,
    updateRootElementName
  } = (0, _useRootElementName.useRootElementName)({
    rootElementName: elementNameProp
  });
  const isNativeButton = (0, _useEventCallback.useEventCallback)(() => {
    const element = buttonRef.current;
    return elementName === 'BUTTON' || elementName === 'INPUT' && ['button', 'submit', 'reset'].includes(element?.type);
  });
  const isValidLink = (0, _useEventCallback.useEventCallback)(() => {
    const element = buttonRef.current;
    return Boolean(elementName === 'A' && element?.href);
  });
  const mergedRef = (0, _useForkRef.useForkRef)(updateRootElementName, externalRef, buttonRef);
  const buttonProps = React.useMemo(() => {
    const additionalProps = {};
    if (tabIndex !== undefined) {
      additionalProps.tabIndex = tabIndex;
    }
    if (elementName === 'BUTTON' || elementName === 'INPUT') {
      if (focusableWhenDisabled) {
        additionalProps['aria-disabled'] = disabled;
      } else {
        additionalProps.disabled = disabled;
      }
    } else if (elementName !== '') {
      additionalProps.role = 'button';
      additionalProps.tabIndex = tabIndex ?? 0;
      if (disabled) {
        additionalProps['aria-disabled'] = disabled;
        additionalProps.tabIndex = focusableWhenDisabled ? tabIndex ?? 0 : -1;
      }
    }
    return additionalProps;
  }, [disabled, elementName, focusableWhenDisabled, tabIndex]);
  const getButtonProps = React.useCallback((externalProps = {}) => {
    const onClickProp = externalProps?.onClick ?? _noop.NOOP;
    const otherExternalProps = {
      ...externalProps
    };
    delete otherExternalProps.onClick;
    return (0, _mergeReactProps.mergeReactProps)(otherExternalProps, buttonProps, {
      type,
      onClick(event) {
        if (!disabled) {
          onClickProp(event);
        }
      },
      onKeyDown(event) {
        if (event.target === event.currentTarget && !isNativeButton() && event.key === ' ') {
          event.preventDefault();
        }

        // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && !isNativeButton() && !isValidLink() && event.key === 'Enter' && !disabled) {
          onClickProp(event);
          event.preventDefault();
        }
      },
      onKeyUp(event) {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/p/sandbox/button-keyup-preventdefault-dn7f0
        // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === ' ') {
          onClickProp(event);
        }
      },
      ref: mergedRef
    });
  }, [buttonProps, disabled, isNativeButton, isValidLink, mergedRef, type]);
  return {
    getButtonProps,
    buttonRef: mergedRef
  };
}